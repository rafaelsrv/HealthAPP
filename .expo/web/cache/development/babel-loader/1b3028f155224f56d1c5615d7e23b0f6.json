{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ResultImc from \"./ResultImc/\";\nimport styles from \"./style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Form() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      height = _React$useState2[0],\n      setHeight = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      weight = _React$useState4[0],\n      setWeight = _React$useState4[1];\n\n  var _useState = useState(\"preencha o peso e alturaa\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      messageimc = _useState2[0],\n      setmessageimc = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imc = _useState4[0],\n      setimc = _useState4[1];\n\n  var _useState5 = useState(\"calcular\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      textButton = _useState6[0],\n      setTextButton = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMsg = _useState8[0],\n      setErrorMsg = _useState8[1];\n\n  function imccalculator() {\n    return setimc((weight / (height * height)).toFixed(2));\n  }\n\n  function verifyNull() {\n    if (imc == null) {\n      setError;\n    }\n  }\n\n  function validationimc() {\n    if (weight != null && height != null) {\n      imccalculator();\n      setHeight(null);\n      setWeight(null);\n      setmessageimc(\"seu imc é igual: \");\n      setTextButton(\"Calcular novamente\");\n      return;\n    }\n\n    setimc(null);\n    setTextButton(\"calcular\");\n    setmessageimc(\"preencha peso e altura\");\n  }\n\n  return _jsxs(View, {\n    style: styles.formContext,\n    children: [_jsxs(View, {\n      style: styles.form,\n      children: [_jsx(Text, {\n        style: styles.formLabel,\n        children: \"Altura\"\n      }), _jsx(TextInput, {\n        onChangeText: setHeight,\n        value: height,\n        placeholder: \"Ex. 1.75\",\n        keyboardType: \"numeric\",\n        style: styles.formInput\n      }), _jsx(Text, {\n        style: styles.formLabel,\n        children: \"Peso\"\n      }), _jsx(TextInput, {\n        onChangeText: setWeight,\n        value: weight,\n        placeholder: \"Ex. 75\",\n        keyboardType: \"numeric\",\n        style: styles.formInput\n      }), _jsx(TouchableOpacity, {\n        style: styles.formCalc,\n        onPress: function onPress() {\n          validationimc();\n        },\n        children: _jsx(Text, {\n          style: styles.formButtom,\n          children: textButton\n        })\n      })]\n    }), _jsx(ResultImc, {\n      messageresultimc: messageimc,\n      resultImc: imc\n    })]\n  });\n}","map":{"version":3,"sources":["C:/Users/rafae/Desktop/Nova pasta (3)/newgit/src/components/Form/index.js"],"names":["React","useState","ResultImc","styles","Form","height","setHeight","weight","setWeight","messageimc","setmessageimc","imc","setimc","textButton","setTextButton","errorMsg","setErrorMsg","imccalculator","toFixed","verifyNull","setError","validationimc","formContext","form","formLabel","formInput","formCalc","formButtom"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\r\nimport {View, Text, TextInput} from \"react-native\"\r\nimport { TouchableOpacity } from \"react-native\"\r\nimport ResultImc from \"./ResultImc/\"\r\nimport styles from \"./style\"\r\n\r\n\r\nexport default function Form(){\r\n\r\n    const[height, setHeight]= React.useState(null);\r\n    const[weight, setWeight]= React.useState(null);\r\n    const[messageimc, setmessageimc]= useState(\"preencha o peso e alturaa\");\r\n    const[imc, setimc]= useState(null);\r\n    const[textButton, setTextButton]= useState(\"calcular\");\r\n    const[errorMsg, setErrorMsg]= useState(null);\r\n\r\n    function imccalculator(){\r\n        return setimc((weight/(height*height)).toFixed(2));\r\n    }\r\n    function verifyNull(){\r\n        if(imc==null){\r\n\r\n            setError\r\n        }\r\n    }\r\n\r\n    function validationimc(){\r\n        if(weight != null && height != null){\r\n            imccalculator()\r\n            setHeight(null)\r\n            setWeight(null)\r\n            setmessageimc(\"seu imc é igual: \")\r\n            setTextButton(\"Calcular novamente\")\r\n            return\r\n\r\n        }\r\n        setimc(null)\r\n        setTextButton(\"calcular\")\r\n        setmessageimc(\"preencha peso e altura\")\r\n    }\r\n\r\n    return(\r\n\r\n        <View style={styles.formContext}>\r\n            <View style={styles.form}> \r\n            <Text style={styles.formLabel}>\r\n                Altura\r\n            </Text >\r\n            <TextInput onChangeText={setHeight}\r\n                       value={height} \r\n                       placeholder=\"Ex. 1.75\"\r\n                       keyboardType=\"numeric\"\r\n                       style={styles.formInput} />\r\n                \r\n                \r\n            <Text style={styles.formLabel}>\r\n                Peso\r\n            </Text>\r\n            <TextInput onChangeText={setWeight}\r\n                       value={weight} \r\n                       placeholder=\"Ex. 75\"\r\n                       keyboardType=\"numeric\"\r\n                       style={styles.formInput}/>\r\n\r\n                       \r\n            <TouchableOpacity \r\n            style={styles.formCalc}\r\n            onPress={() =>{validationimc()}}\r\n                >\r\n                        <Text style={styles.formButtom}>{textButton}</Text>\r\n            </TouchableOpacity>     \r\n\r\n        </View>\r\n            <ResultImc messageresultimc = {messageimc} resultImc={imc}/>\r\n        </View>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}