{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ResultImc from \"./Resultimc/\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Form() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      height = _React$useState2[0],\n      setHeight = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      weight = _React$useState4[0],\n      setWeight = _React$useState4[1];\n\n  var _useState = useState(\"preencha o peso e alturaa\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      messageimc = _useState2[0],\n      setmessageimc = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imc = _useState4[0],\n      setimc = _useState4[1];\n\n  var _useState5 = useState(\"calcular\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      textButton = _useState6[0],\n      setTextButton = _useState6[1];\n\n  function imccalculator() {\n    return setimc((weight / (height * height)).toFixed(2));\n  }\n\n  function validationimc() {\n    if (weight != null && height != null) {\n      imccalculator();\n      setHeight(null);\n      setWeight(null);\n      setmessageimc(\"seu imc é igual: \");\n      setTextButton(\"Calcular novamente\");\n      return;\n    }\n\n    setimc(null);\n    setTextButton(\"calcular\");\n    setmessageimc(\"preencha peso e altura\");\n  }\n\n  return _jsxs(View, {\n    children: [_jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Altura\"\n      }), _jsx(TextInput, {\n        onChangeText: setHeight,\n        value: height,\n        placeholder: \"Ex. 1.75\",\n        keyboardType: \"numeric\"\n      }), _jsx(Text, {\n        children: \"Peso\"\n      }), _jsx(TextInput, {\n        onChangeText: setWeight,\n        value: weight,\n        placeholder: \"Ex. 75\",\n        keyboardType: \"numeric\"\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return validationimc();\n        },\n        title: textButton\n      })]\n    }), _jsx(\"resultimc\", {\n      messageresultimc: messageimc,\n      resultimc: imc\n    })]\n  });\n}","map":{"version":3,"sources":["C:/Users/rafae/Desktop/Start/COD3R/my-project/src/components/Form/index.js"],"names":["React","useState","ResultImc","Form","height","setHeight","weight","setWeight","messageimc","setmessageimc","imc","setimc","textButton","setTextButton","imccalculator","toFixed","validationimc"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;AAEA,OAAOC,SAAP;;;AAGA,eAAe,SAASC,IAAT,GAAe;AAE1B,wBAA0BH,KAAK,CAACC,QAAN,CAAe,IAAf,CAA1B;AAAA;AAAA,MAAMG,MAAN;AAAA,MAAcC,SAAd;;AACA,yBAA0BL,KAAK,CAACC,QAAN,CAAe,IAAf,CAA1B;AAAA;AAAA,MAAMK,MAAN;AAAA,MAAcC,SAAd;;AACA,kBAAkCN,QAAQ,CAAC,2BAAD,CAA1C;AAAA;AAAA,MAAMO,UAAN;AAAA,MAAkBC,aAAlB;;AACA,mBAAoBR,QAAQ,CAAC,IAAD,CAA5B;AAAA;AAAA,MAAMS,GAAN;AAAA,MAAWC,MAAX;;AACA,mBAAkCV,QAAQ,CAAC,UAAD,CAA1C;AAAA;AAAA,MAAMW,UAAN;AAAA,MAAkBC,aAAlB;;AAEA,WAASC,aAAT,GAAwB;AACpB,WAAOH,MAAM,CAAC,CAACL,MAAM,IAAEF,MAAM,GAACA,MAAT,CAAP,EAAyBW,OAAzB,CAAiC,CAAjC,CAAD,CAAb;AACH;;AAED,WAASC,aAAT,GAAwB;AACpB,QAAGV,MAAM,IAAI,IAAV,IAAkBF,MAAM,IAAI,IAA/B,EAAoC;AAChCU,MAAAA,aAAa;AACbT,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,MAAAA,aAAa,CAAC,mBAAD,CAAb;AACAI,MAAAA,aAAa,CAAC,oBAAD,CAAb;AACA;AAEH;;AACDF,IAAAA,MAAM,CAAC,IAAD,CAAN;AACAE,IAAAA,aAAa,CAAC,UAAD,CAAb;AACAJ,IAAAA,aAAa,CAAC,wBAAD,CAAb;AACH;;AAED,SAEI,MAAC,IAAD;AAAA,eACI,MAAC,IAAD;AAAA,iBACA,KAAC,IAAD;AAAA;AAAA,QADA,EAIA,KAAC,SAAD;AAAW,QAAA,YAAY,EAAEJ,SAAzB;AACW,QAAA,KAAK,EAAED,MADlB;AAEW,QAAA,WAAW,EAAC,UAFvB;AAGW,QAAA,YAAY,EAAC;AAHxB,QAJA,EAUA,KAAC,IAAD;AAAA;AAAA,QAVA,EAaA,KAAC,SAAD;AAAW,QAAA,YAAY,EAAEG,SAAzB;AACW,QAAA,KAAK,EAAED,MADlB;AAEW,QAAA,WAAW,EAAC,QAFvB;AAGW,QAAA,YAAY,EAAC;AAHxB,QAbA,EAiBA,KAAC,MAAD;AAAQ,QAAA,OAAO,EAAG;AAAA,iBAAMU,aAAa,EAAnB;AAAA,SAAlB;AACQ,QAAA,KAAK,EAAEJ;AADf,QAjBA;AAAA,MADJ,EAqBI;AAAW,MAAA,gBAAgB,EAAIJ,UAA/B;AAA2C,MAAA,SAAS,EAAEE;AAAtD,MArBJ;AAAA,IAFJ;AA0BH","sourcesContent":["import React, {useState} from \"react\"\r\nimport {View, Text, TextInput, Button} from \"react-native\"\r\nimport ResultImc from \"./Resultimc/\";\r\n\r\n\r\nexport default function Form(){\r\n\r\n    const[height, setHeight]= React.useState(null);\r\n    const[weight, setWeight]= React.useState(null);\r\n    const[messageimc, setmessageimc]= useState(\"preencha o peso e alturaa\");\r\n    const[imc, setimc]= useState(null);\r\n    const[textButton, setTextButton]= useState(\"calcular\");\r\n\r\n    function imccalculator(){\r\n        return setimc((weight/(height*height)).toFixed(2));\r\n    }\r\n\r\n    function validationimc(){\r\n        if(weight != null && height != null){\r\n            imccalculator()\r\n            setHeight(null)\r\n            setWeight(null)\r\n            setmessageimc(\"seu imc é igual: \")\r\n            setTextButton(\"Calcular novamente\")\r\n            return\r\n\r\n        }\r\n        setimc(null)\r\n        setTextButton(\"calcular\")\r\n        setmessageimc(\"preencha peso e altura\")\r\n    }\r\n\r\n    return(\r\n\r\n        <View>\r\n            <View>\r\n            <Text>\r\n                Altura\r\n            </Text>\r\n            <TextInput onChangeText={setHeight}\r\n                       value={height} \r\n                       placeholder=\"Ex. 1.75\"\r\n                       keyboardType=\"numeric\" />\r\n                \r\n                \r\n            <Text>\r\n                Peso\r\n            </Text>\r\n            <TextInput onChangeText={setWeight}\r\n                       value={weight} \r\n                       placeholder=\"Ex. 75\"\r\n                       keyboardType=\"numeric\"/>\r\n            <Button onPress= {() => validationimc()}\r\n                    title={textButton}/>        \r\n        </View>\r\n            <resultimc messageresultimc = {messageimc} resultimc={imc}/>\r\n        </View>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}